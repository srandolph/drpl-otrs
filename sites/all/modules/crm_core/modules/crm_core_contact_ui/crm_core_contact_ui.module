<?php

/**
 * @file
 * Provides a user interface for CRM Core Contact.
 */

/**
 * Implements hook_menu().
 */
function crm_core_contact_ui_menu() {
  $items = array();

  /**
   * Contacts
   */
  $items['crm-core/contact/%crm_core_contact'] = array(
    'title' => 'Contact',
    'page callback' => 'crm_core_contact_ui_view',
    'page arguments' => array(2),
    'title callback' => 'crm_core_contact_title',
    'title arguments' => array(2),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'crm_core_contact', 2),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['crm-core/contact/%crm_core_contact/view'] = array(
    'title' => 'View',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['crm-core/contact/%crm_core_contact/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_contact_ui_form', 2),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'crm_core_contact', 2),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'crm_core_contact_ui.pages.inc',
  );

  $items['crm-core/contact/%crm_core_contact/revert/%'] = array(
    'title' => 'Contact',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_contact_ui_revert_form', 2, 4),
    'access callback' => 'entity_access',
    'access arguments' => array('revert', 'crm_core_contact', 2),
    'type' => MENU_CALLBACK,
    'file' => 'crm_core_contact_ui.pages.inc',
  );

  $items['crm-core/contact/%crm_core_contact/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_contact_ui_delete_form', 2),
    'access callback' => 'entity_access',
    'access arguments' => array('delete', 'crm_core_contact', 2),
    'type' => MENU_CALLBACK,
    'file' => 'crm_core_contact_ui.pages.inc',
  );

  $items['crm-core/contact/add'] = array(
    'title' => 'Add a contact',
    'description' => 'Add a new contact to the CRM.',
    'page callback' => 'crm_core_contact_ui_add_page',
    'access callback' => 'entity_access',
    'access arguments' => array('create_view', 'crm_core_contact'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE,
    'weight' => 0,
    'file' => 'crm_core_contact_ui.pages.inc',
  );
  foreach (crm_core_contact_types() as $type => $contact_type) {
    $items['crm-core/contact/add/' . $type] = array(
      'title' => 'Add @type',
      'title arguments' => array('@type' => $contact_type->name),
      'description' => $contact_type->description,
      'page callback' => 'crm_core_contact_entity_ui_get_form_wrapper',
      'page arguments' => array($type),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'crm_core_contact', $type),
      'file' => 'crm_core_contact_ui.pages.inc',
    );
  }

  /*
   * Contact Debug
   */
  if (module_exists('devel')) {
    $items['crm-core/contact/%crm_core_contact/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'crm_core_contact_devel_load_object',
      'page arguments' => array(2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );

    $items['crm-core/contact/%crm_core_contact/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    $items['crm-core/contact/%crm_core_contact/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'crm_core_contact_devel_render_object',
      'page arguments' => array(2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );
  }

  return $items;
}

/**
 * Implements hook_views_api().
 */
function crm_core_contact_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_core_contact_ui') . '/views',
  );
}

/**
 * Implements hook_menu_alter().
 */
function crm_core_contact_ui_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  $items['admin/structure/crm-core/contact-types/%crm_core_contact_type/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  $items['admin/structure/crm-core/contact-types/%crm_core_contact_type/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  $dashboard_enabled = variable_get('crm_core_dashboard_enabled', FALSE);
  if (!$dashboard_enabled) {
    $items['crm-core/contact']['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
}

/**
 * Implements hook_admin_paths().
 */
function crm_core_contact_ui_admin_paths() {
  $paths = array(
    'crm-core/admin/contact/types' => TRUE,
    'crm-core/admin/contact/types/*' => TRUE,
  );

  return $paths;
}

/**
 * Implements hook_theme().
 */
function crm_core_contact_ui_theme() {
  $theme = array(
    'crm_core_contact_ui_type_overview' => array(
      'variables' => array('contact_type' => NULL),
      'file' => 'theme/crm_core_contact_ui_type.theme.inc',
    ),
    'crm_core_contact_ui_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'theme/crm_core_contact_ui.theme.inc',
    ),
    'crm_core_contact_ui_revsions' => array(
      'variables' => array('contact_revisions' => array()),
      'file' => 'theme/crm_core_contact_ui.theme.inc',
    ),
  );

  return $theme;
}

/**
 * Helper function to set breadcrumbs before displaying contact.
 */
function crm_core_contact_ui_view($contact) {
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('CRM Core'), 'crm-core'),
    l(t('Contacts'), 'crm-core/contact'),
  );
  drupal_set_breadcrumb($breadcrumb);

  return crm_core_contact_view($contact);
}

/**
 * Returns save contact button name depending on contact type.
 */
function crm_core_contact_ui_save_contact_button_name($contact_type) {
  return t('Save !contact_type', array(
    '!contact_type' => crm_core_contact_type_get_name($contact_type)
  ));
}

/**
 * Get CRM Core Contact primary field value.
 *
 * @param CRMCoreContactEntity $contact
 *   CRM Core Contact.
 * @param string $primary_field
 *   Primary field name.
 *
 * @return string
 *   Value of specified primary field or empty string.
 */
function crm_core_contact_get_primary_field_value(CRMCoreContactEntity $contact, $primary_field) {
  $contact_type = crm_core_contact_type_load($contact->type);
  $field = empty($contact_type->primary_fields[$primary_field]) ? '' : $contact_type->primary_fields[$primary_field];
  $field_value = '';
  if (empty($field)) {
    // Check that user has access to configure crm_core_contact.
    if (user_access('administer contact types')) {
      // Alert privileged users that requested primary field didn't configured.
      $path = 'admin/structure/crm-core/contact-types/manage/' . $contact_type->type;
      $message = "Some module requested value of primary field %field of"
        . " contact of %contact_type type, but this primary field is not"
        . " configured for this contact type. You can configure it !here.";
      drupal_set_message(t($message, array(
        '%contact_type' => $contact_type->type,
        '%field' => $primary_field,
        '!here' => l(t('here'), $path),
      )), 'warning');
    }
  }
  else {
    $contact_wrapper = entity_metadata_wrapper('crm_core_contact', $contact);
    $field_value = $contact_wrapper->{$field}->value();
  }

  return $field_value;
}
